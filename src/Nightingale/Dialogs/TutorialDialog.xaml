<ContentDialog
    x:Class="Nightingale.Dialogs.TutorialDialog"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="using:Nightingale.Dialogs"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:usercontrols="using:Nightingale.UserControls"
    CornerRadius="8"
    mc:Ignorable="d">

    <Grid>
        <FlipView x:Name="flipView" Background="Transparent">
            <FlipViewItem>
                <usercontrols:TutorialItem Title="Welcome to Nightingale" Image="https://raw.githubusercontent.com/jenius-apps/nightingale-rest-api-client/master/images/nightingale-hero.png">
                    <usercontrols:TutorialItem.Caption>
                        Nightingale is a modern, resource-efficient REST client for Windows. Using this app,
                        you can send HTTP requests and view responses. Built using the powerful UWP framework, Nightingale
                        is optimized for performance. Click next to view some of our features.
                    </usercontrols:TutorialItem.Caption>
                </usercontrols:TutorialItem>
            </FlipViewItem>
            <FlipViewItem>
                <usercontrols:TutorialItem Title="Send requests and view responses" Image="https://raw.githubusercontent.com/jenius-apps/nightingale-rest-api-client/master/screenshots/send.png">
                    <usercontrols:TutorialItem.Caption>
                        Send HTTP requests by opening a new tab, adding a URL such as http://jsonplaceholder.typicode.com/posts, and then pressing the send button.
                        The response will be displayed in the response pane of Nightingale.
                    </usercontrols:TutorialItem.Caption>
                </usercontrols:TutorialItem>
                <!--
                    You can also create requests by navigating to Home &gt; Add request.
                    Lastly, you can also right click in an empty space of the left sidebar to open a context menu. From here you can add a request.
                -->
            </FlipViewItem>
            <FlipViewItem>
                <usercontrols:TutorialItem Title="Inherit properties using collections" Image="https://raw.githubusercontent.com/jenius-apps/nightingale-rest-api-client/master/screenshots/collection.png">
                    <usercontrols:TutorialItem.Caption>
                        You can add authentication, queries, and headers to collections. All requests in the collection
                        will inherit these properties.
                    </usercontrols:TutorialItem.Caption>
                </usercontrols:TutorialItem>
            </FlipViewItem>
            <FlipViewItem>
                <usercontrols:TutorialItem Title="Use variables" Image="https://raw.githubusercontent.com/jenius-apps/nightingale-rest-api-client/master/screenshots/variables.png">
                    <usercontrols:TutorialItem.Caption>
                        In the Workspace section of the top menu, you can click on Environment Variables. Here you can add key-value pairs which will
                        be used as variables across Nightingale.
                    </usercontrols:TutorialItem.Caption>
                </usercontrols:TutorialItem>
            </FlipViewItem>
            <FlipViewItem>
                <usercontrols:TutorialItem Title="Get started" Image="https://raw.githubusercontent.com/jenius-apps/nightingale-rest-api-client/master/screenshots/dark.png">
                    <usercontrols:TutorialItem.Caption>
                        This is a small overview of some features Nightingale has to offer. If you find any
                        issues, please send feedback on our GitHub page. Thanks, and enjoy Nightingale!
                    </usercontrols:TutorialItem.Caption>
                </usercontrols:TutorialItem>
            </FlipViewItem>
        </FlipView>

        <Grid VerticalAlignment="Bottom">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="auto" />
            </Grid.ColumnDefinitions>

            <Button
                Grid.Column="0"
                Click="{x:Bind Close}"
                Content="Close" />

            <StackPanel Grid.Column="2" Orientation="Horizontal">
                <Button Click="{x:Bind Back}" Content="Back" />
                <Button
                    Margin="4,0,0,0"
                    Click="{x:Bind Next}"
                    Content="Next" />
            </StackPanel>

        </Grid>
    </Grid>
</ContentDialog>
